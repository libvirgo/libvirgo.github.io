<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Enum on</title><link>/tags/enum/</link><description>Recent content in Enum on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 13 Jan 2021 11:00:00 +0800</lastBuildDate><atom:link href="/tags/enum/index.xml" rel="self" type="application/rss+xml"/><item><title>深入Rust枚举</title><link>/post/translation/rust/peeking_inside_a_rust_enum/</link><pubDate>Wed, 13 Jan 2021 11:00:00 +0800</pubDate><guid>/post/translation/rust/peeking_inside_a_rust_enum/</guid><description>&lt;img src="/post/translation/rust/peeking_inside_a_rust_enum/cover.png" alt="Featured image of post 深入Rust枚举" />&lt;blockquote>
&lt;p>本译文译自 &lt;a class="link" href="https://fasterthanli.me/articles/peeking-inside-a-rust-enum" target="_blank" rel="noopener"
>Peeking inside a Rust enum&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h1 id="前言">前言&lt;/h1>
&lt;p>在我最近 &lt;code>Rust Q&amp;amp;A&lt;/code> &lt;code>twitch&lt;/code> 频道里, 有些人提出了一个看起来简单的问题: 为什么 &lt;code>small string&lt;/code> 类型, 像 &lt;code>SmartString&lt;/code> or &lt;code>SmolStr&lt;/code> 和 &lt;code>String&lt;/code> 有着一样的大小, 但是 &lt;code>small vec&lt;/code> 类型, 像 &lt;code>SmallVec&lt;/code> 却要比 &lt;code>Vec&lt;/code> 大?&lt;/p>
&lt;p>我知道我使用了简单作为形容词, 但是事实上要了解这个问题, 我们需要一些背景知识&lt;/p>
&lt;blockquote>
&lt;p>译者: 亿点点&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;h2 id="这个问题到底是什么">这个问题到底是什么?&lt;/h2>
&lt;p>我最近谈到 &lt;code>Rust&lt;/code> &lt;a class="link" href="https://fasterthanli.me/articles/small-strings-in-rust" target="_blank" rel="noopener"
>small string crates&lt;/a>.&lt;/p>
&lt;p>被这些 &lt;code>crates&lt;/code> 导出的类型可以避免多次内存分配, 并且降低内存使用量. 让我们看一个 &lt;a class="link" href="https://lib.rs/crates/smartstring" target="_blank" rel="noopener"
>smartstring&lt;/a> 的代码作为例子.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> smartstring::{Compact, SmartString};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::mem::size_of_val;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> smart &lt;span style="color:#f92672">=&lt;/span> SmartString::&lt;span style="color:#f92672">&amp;lt;&lt;/span>Compact&lt;span style="color:#f92672">&amp;gt;&lt;/span>::from(&lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of_val(&lt;span style="color:#f92672">&amp;amp;&lt;/span>smart));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> stand &lt;span style="color:#f92672">=&lt;/span> String::from(&lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of_val(&lt;span style="color:#f92672">&amp;amp;&lt;/span>stand));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:6&lt;span style="color:#f92672">]&lt;/span> size_of_val&lt;span style="color:#f92672">(&lt;/span>&amp;amp;smart&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:9&lt;span style="color:#f92672">]&lt;/span> size_of_val&lt;span style="color:#f92672">(&lt;/span>&amp;amp;stand&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正如你看到的, 同样也是最初的问题描述的那样, 这两个类型的大小是相同的.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>是的, 这当然不是一个完整的故事, 在这个特别的例子中, &lt;code>smart&lt;/code> 以 &lt;code>inline&lt;/code> 的方式存储它的值(在栈上), 而标准库将值存储在堆上:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>如果我们想知道每个类型到底总共使用了多少内存, 我们可以这样做:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> smart &lt;span style="color:#f92672">=&lt;/span> SmartString::&lt;span style="color:#f92672">&amp;lt;&lt;/span>Compact&lt;span style="color:#f92672">&amp;gt;&lt;/span>::from(&lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of_val(&lt;span style="color:#f92672">&amp;amp;&lt;/span>smart));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> stand &lt;span style="color:#f92672">=&lt;/span> String::from(&lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of_val(&lt;span style="color:#f92672">&amp;amp;&lt;/span>stand) &lt;span style="color:#f92672">+&lt;/span> stand.capacity());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:6&lt;span style="color:#f92672">]&lt;/span> size_of_val&lt;span style="color:#f92672">(&lt;/span>&amp;amp;smart&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:9&lt;span style="color:#f92672">]&lt;/span> size_of_val&lt;span style="color:#f92672">(&lt;/span>&amp;amp;stand&lt;span style="color:#f92672">)&lt;/span> + stand.capacity&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">35&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>典型的, 在 &lt;code>Linux 64-bit&lt;/code> 系统中栈和堆在虚拟地址中的空间相差很远, 这意味着我们如果打印字符串的元数据的地址和内容的地址, 我们就可以看到:&lt;/p>
&lt;ul>
&lt;li>&lt;code>SmartString&lt;/code> 的元数据和内容在相邻的位置.&lt;/li>
&lt;li>&lt;code>String&lt;/code> 的元数据和内容相距很远.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> smartstring::{Compact, SmartString};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> smart &lt;span style="color:#f92672">=&lt;/span> SmartString::&lt;span style="color:#f92672">&amp;lt;&lt;/span>Compact&lt;span style="color:#f92672">&amp;gt;&lt;/span>::from(&lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> smart_meta &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>smart &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> smart_data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>smart.as_bytes()[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!((smart_meta, smart_data));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> stand &lt;span style="color:#f92672">=&lt;/span> String::from(&lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> stand_meta &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>stand &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> stand_data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>stand.as_bytes()[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!((stand_meta, stand_data));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:7&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">(&lt;/span>smart_meta, smart_data&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x00007ffce4cf4728,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x00007ffce4cf4729,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:12&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">(&lt;/span>stand_meta, stand_data&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x00007ffce4cf47f8,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x0000555f87686a60,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>不! 只有在小于24字节的时候是存储在栈上的, 就和 &lt;code>String&lt;/code> 一样. 我们用稍微长一点的字符串来看看.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> smartstring::{Compact, SmartString};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> input &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Turns out you can blame your tools *and* be a good craftsperson. Who knew?&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> smart &lt;span style="color:#f92672">=&lt;/span> SmartString::&lt;span style="color:#f92672">&amp;lt;&lt;/span>Compact&lt;span style="color:#f92672">&amp;gt;&lt;/span>::from(input);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> smart_meta &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>smart &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> smart_data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>smart.as_bytes()[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!((smart_meta, smart_data));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> stand &lt;span style="color:#f92672">=&lt;/span> String::from(input);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> stand_meta &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>stand &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> stand_data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>stand.as_bytes()[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!((stand_meta, stand_data));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:9&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">(&lt;/span>smart_meta, smart_data&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x00007ffd460d0268,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x0000555f4636ca30,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:14&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">(&lt;/span>stand_meta, stand_data&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x00007ffd460d0338,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x0000555f4636cac0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;然后我们就可以看到这两个类型的内容现在都放在堆上了.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="一个单词-多种意义">一个单词, 多种意义&lt;/h2>
&lt;p>如果你有着 &lt;code>C/C++/Java/C#&lt;/code> 的语言背景, 一个 &lt;code>enum&lt;/code> 仅仅意味着一个 &lt;code>Integer&lt;/code> 类型, 只是它的值有着自己的意义.&lt;/p>
&lt;p>让我们看一个 &lt;code>C&lt;/code> 的例子:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> Drink {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> Drink dri &lt;span style="color:#f92672">=&lt;/span> Soda;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;dri = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, dri);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(dri) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(dri));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(int) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里, 我们声明了一个枚举类型 &lt;code>enum Drink&lt;/code>, 有三个变体, 不过仅仅是从0开始的数字, 所以我们有 &lt;code>Water = 0&lt;/code>, &lt;code>Soda = 1&lt;/code>, &lt;code>Juice = 2&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dri &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof&lt;span style="color:#f92672">(&lt;/span>dri&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof&lt;span style="color:#f92672">(&lt;/span>int&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然而我不是很喜欢这个代码, 我不想要额外的限定词, 并且想要我的变体有着自己的命名空间, 但在 &lt;code>C&lt;/code> 里面我们需要自己做这些事:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// this could also be done in two separate declarations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> Drink {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} Drink;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink dri &lt;span style="color:#f92672">=&lt;/span> Drink_Soda;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;dri = %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, dri);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(dri) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(dri));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(int) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ahhh, 好多了. 但是这里仍然有其它的东西我不是特别喜欢, 像是 &lt;code>C&lt;/code> 的 &lt;code>switch&lt;/code>. 下面的代码是错误的:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> Drink {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} Drink;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">print_drink&lt;/span>(Drink dri) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (dri) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Drink_Water:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s water!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Drink_Soda:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s soda!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Drink_Juice:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s juice!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(Drink_Soda);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正确的代码是在每个 &lt;code>case&lt;/code> 语句的结尾都使用 &lt;code>break&lt;/code>. 这是刚起步的开发人员很早就应该了解的事情之一.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>即使我们修复了 &lt;code>switch&lt;/code> 的问题, 还有件我不喜欢 &lt;code>C&lt;/code> 枚举的事情, 那就是没什么可以阻止我传递一个无意义的值:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> Drink {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} Drink;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">print_drink&lt;/span>(Drink dri) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (dri) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Drink_Water:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s water!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Drink_Soda:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s soda!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> Drink_Juice:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s juice!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(&lt;span style="color:#ae81ff">47&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在, 如果我们看看 &lt;code>Rust&lt;/code> 的枚举&amp;hellip; 这是个完全不同的事情.&lt;/p>
&lt;p>让我们尽量写一个相同的程序.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::mem::size_of_val;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Drink&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> dri &lt;span style="color:#f92672">=&lt;/span> Drink::Water;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of_val(&lt;span style="color:#f92672">&amp;amp;&lt;/span>dri));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(dri &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#66d9ef">u32&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warning: variant is never constructed: &lt;span style="color:#e6db74">`&lt;/span>Soda&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --&amp;gt; src/main.rs:5:5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span> | Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ^^^^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> note: &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#75715e">#[warn(dead_code)]` on by default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warning: variant is never constructed: &lt;span style="color:#e6db74">`&lt;/span>Juice&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --&amp;gt; src/main.rs:6:5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">6&lt;/span> | Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ^^^^^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warning: &lt;span style="color:#ae81ff">2&lt;/span> warnings emitted
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> size_of_val&lt;span style="color:#f92672">(&lt;/span>&amp;amp;dri&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:12&lt;span style="color:#f92672">]&lt;/span> dri as u32 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么我们明显地得到了什么好处呢?&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>对的, 但那并不是全部! 编译器警告我们有没有使用的变体, 并且我们可以简单地给这个枚举派生一个 &lt;code>Debug&lt;/code> trait 的实现:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[derive(Debug)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Drink&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(&lt;span style="color:#f92672">&amp;amp;&lt;/span>Drink::Water);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(&lt;span style="color:#f92672">&amp;amp;&lt;/span>Drink::Juice);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(&lt;span style="color:#f92672">&amp;amp;&lt;/span>Drink::Soda);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">print_drink&lt;/span>(dri: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Drink&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println!(&lt;span style="color:#e6db74">&amp;#34;{:?}&amp;#34;&lt;/span>, dri);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Water
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Juice
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Soda
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;并且假如我们不那么做, 我们也能使用 &lt;code>match&lt;/code> 而不是 &lt;code>switch&lt;/code>, &lt;code>match&lt;/code> 会检查是否匹配了枚举的所有变体, 举个例子, 下面的代码不能通过编译:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">print_drink&lt;/span>(dri: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Drink&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> dri {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Water &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s water!&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Soda &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s soda!&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error&lt;span style="color:#f92672">[&lt;/span>E0004&lt;span style="color:#f92672">]&lt;/span>: non-exhaustive patterns: &lt;span style="color:#e6db74">`&lt;/span>&amp;amp;Juice&lt;span style="color:#e6db74">`&lt;/span> not covered
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --&amp;gt; src/main.rs:15:11
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2&lt;/span> | / enum Drink &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span> | | Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span> | | Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span> | | Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | | ----- not covered
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">6&lt;/span> | | &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |_- &lt;span style="color:#e6db74">`&lt;/span>Drink&lt;span style="color:#e6db74">`&lt;/span> defined here
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">15&lt;/span> | match dri &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ^^^ pattern &lt;span style="color:#e6db74">`&lt;/span>&amp;amp;Juice&lt;span style="color:#e6db74">`&lt;/span> not covered
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> note: the matched value is of type &lt;span style="color:#e6db74">`&lt;/span>&amp;amp;Drink&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译器给出了两种可能的方法来修复这个问题, 或是添加一个通配符:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">print_drink&lt;/span>(dri: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Drink&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> dri {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Water &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s water!&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Soda &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s soda!&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s something we don&amp;#39;t know about!&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者是覆盖到所有的情况:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">print_drink&lt;/span>(dri: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Drink&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> dri {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Water &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s water!&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Soda &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s soda!&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Juice &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s juice!&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>讲到 &lt;code>match&lt;/code>, 它也是一个表达式, 所以我们也可以这么做:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">print_drink&lt;/span>(dri: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Drink&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println!(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;{}&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> dri {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Water &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s water!&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Soda &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s soda!&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Juice &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s juice!&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>尽管就我个人而言, 我可能更倾向于这样写:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">print_drink&lt;/span>(dri: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Drink&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> dri {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Water &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;water&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Soda &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;soda&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Juice &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;juice&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println!(&lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s {}!&amp;#34;&lt;/span>, name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>让我们想想, 我们还抱怨了 &lt;code>C&lt;/code> 枚举的什么地方?&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>对! 让我们试试:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(&lt;span style="color:#f92672">&amp;amp;&lt;/span>Drink::Water);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(&lt;span style="color:#f92672">&amp;amp;&lt;/span>Drink::Juice);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(&lt;span style="color:#f92672">&amp;amp;&lt;/span>Drink::Soda);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> val: &lt;span style="color:#a6e22e">Drink&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> Drink;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(&lt;span style="color:#f92672">&amp;amp;&lt;/span>val);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error&lt;span style="color:#f92672">[&lt;/span>E0605&lt;span style="color:#f92672">]&lt;/span>: non-primitive cast: &lt;span style="color:#e6db74">`&lt;/span>i32&lt;span style="color:#e6db74">`&lt;/span> as &lt;span style="color:#e6db74">`&lt;/span>Drink&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --&amp;gt; src/main.rs:13:22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">13&lt;/span> | let val: Drink &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> as Drink;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ^^^^^^^^^^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> note: an &lt;span style="color:#e6db74">`&lt;/span>as&lt;span style="color:#e6db74">`&lt;/span> expression can only be used to convert between primitive types. Consider using the &lt;span style="color:#e6db74">`&lt;/span>From&lt;span style="color:#e6db74">`&lt;/span> traitt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ah, 这看起来并不能工作! 然而在某些情形中我们可能需要这么做, 我们可以解析一个二进制格式, 并且已经确保检查这个数字类型的值在这个枚举中是有意义的 - 那么我们可以使用 &lt;code>transmute&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Drink&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> juice_from_binary_format &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> val: &lt;span style="color:#a6e22e">Drink&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { std::mem::transmute(juice_from_binary_format &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#66d9ef">u8&lt;/span>) };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(&lt;span style="color:#f92672">&amp;amp;&lt;/span>val);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">print_drink&lt;/span>(dri: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Drink&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> dri {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Water &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;water&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Soda &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;soda&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink::Juice &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;juice&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println!(&lt;span style="color:#e6db74">&amp;#34;it&amp;#39;s {}!&amp;#34;&lt;/span>, name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>it&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>s juice!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当前, 通常我们希望给这个不安全操作提供一个安全的接口:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::convert::{TryFrom, TryInto};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Drink&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> TryFrom&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">i32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> Drink {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Error&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;#39;&lt;/span>static &lt;span style="color:#66d9ef">str&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">try_from&lt;/span>(x: &lt;span style="color:#66d9ef">i32&lt;/span>) -&amp;gt; Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>Self, Self::Error&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> x {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">..=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Ok(&lt;span style="color:#66d9ef">unsafe&lt;/span> { std::mem::transmute(x &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#66d9ef">u8&lt;/span>) }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Err(&lt;span style="color:#e6db74">&amp;#34;invalid Drink value&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> juice_from_binary_format: &lt;span style="color:#66d9ef">i32&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> val: &lt;span style="color:#a6e22e">Drink&lt;/span> &lt;span style="color:#f92672">=&lt;/span> juice_from_binary_format.try_into().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(&lt;span style="color:#f92672">&amp;amp;&lt;/span>val);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> invalid_value: &lt;span style="color:#66d9ef">i32&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> val: &lt;span style="color:#a6e22e">Drink&lt;/span> &lt;span style="color:#f92672">=&lt;/span> invalid_value.try_into().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_drink(&lt;span style="color:#f92672">&amp;amp;&lt;/span>val);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>it&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>s juice!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>thread &lt;span style="color:#e6db74">&amp;#39;main&amp;#39;&lt;/span> panicked at &lt;span style="color:#e6db74">&amp;#39;called `Result::unwrap()` on an `Err` value: &amp;#34;invalid Drink value&amp;#34;&amp;#39;&lt;/span>, src/main.rs:27:22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>note: run with &lt;span style="color:#e6db74">`&lt;/span>RUST_BACKTRACE&lt;span style="color:#f92672">=&lt;/span>1&lt;span style="color:#e6db74">`&lt;/span> environment variable to display a backtrace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>并且我们的快乐还并不止步于此.&lt;/p>
&lt;p>还记得我们之前打印我们的枚举大小么? 让我们来 &lt;a class="link" href="https://en.wikipedia.org/wiki/Memory_refresh" target="_blank" rel="noopener"
>refresh out memory&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::mem::size_of;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Drink&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>Drink&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;Drink&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>单位是字节, 所以这里显示我们的枚举只有一个字节.&lt;/p>
&lt;p>让我们与 &lt;code>C&lt;/code> 的对比下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> Drink {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Drink_Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} Drink;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(Drink) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(Drink));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof&lt;span style="color:#f92672">(&lt;/span>Drink&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里枚举有足足4个字节, 所以我们可以近似地说 &lt;code>Rust&lt;/code> 的枚举是 &lt;code>u8&lt;/code>, &lt;code>C&lt;/code> 枚举是 &lt;code>u32&lt;/code>.&lt;/p>
&lt;p>如果 &lt;code>Rust&lt;/code> 的枚举超过256个变体呢?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::mem::size_of;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Drink&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Variant0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Variant1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Variant2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Variant3,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Variant4,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// (etc.)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Variant252,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Variant253,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Variant254,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Variant255,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Variant256,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>Drink&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>译者: &lt;a class="link" href="https://en.wikipedia.org/wiki/Off-by-one_error#Fencepost_error" target="_blank" rel="noopener"
>counting the fences, when you should be counting the posts.&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>不管怎样, 我们先看看现在的枚举大小?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:265&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;Drink&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2个字节! 看起来又像是 &lt;code>u16&lt;/code>.&lt;/p>
&lt;p>当然看起来像并不是一个专业术语 - 专业术语应该是 &amp;ldquo;representation&amp;rdquo;. 一个 &lt;code>Rust&lt;/code> 枚举是对特定整数类型的抽象.&lt;/p>
&lt;p>让我们看看我们原来的 &lt;code>Drink&lt;/code>:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>概念上, &lt;code>Drink&lt;/code> 只有三个有意义的值, 但是它的表现是一个 &lt;code>u8&lt;/code>, 能持有256个不同的值. 这就是你为什么总是能把 &lt;code>Drink&lt;/code> 转为 &lt;code>u8&lt;/code>, 但是把 &lt;code>u8&lt;/code> 转为 &lt;code>Drink&lt;/code> 却是一个容易出错的操作.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>对的! 潜在的 &lt;code>Drink&lt;/code> 作为一个 &lt;code>u8&lt;/code> 应该总是为0, 1或者2, 这被称为不变体(invariant). 如果我们破坏了这个不变体, 我们的代码就不是那么健壮了.&lt;/p>
&lt;p>在 &lt;code>Rust&lt;/code>, 破坏不变体需要使用 &lt;code>unsafe&lt;/code> 代码:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::mem::transmute;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[derive(Debug, PartialEq)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Drink&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Water,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Soda,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Juice,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// woops! that&amp;#39;s unsound.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> d: &lt;span style="color:#a6e22e">Drink&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { transmute(&lt;span style="color:#ae81ff">15_&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>) };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(&lt;span style="color:#f92672">&amp;amp;&lt;/span>d);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(d &lt;span style="color:#f92672">==&lt;/span> Drink::Juice);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:14&lt;span style="color:#f92672">]&lt;/span> &amp;amp;d &lt;span style="color:#f92672">=&lt;/span> Juice
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:15&lt;span style="color:#f92672">]&lt;/span> d &lt;span style="color:#f92672">==&lt;/span> Drink::Juice &lt;span style="color:#f92672">=&lt;/span> false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>问题的关键在于不是所有的事情都可以交由计算机去做(意味着需要你自己去做), 可以使用 &lt;code>Rust&lt;/code> 的模型检查. 因为种种原因, 你仍然需要 &lt;code>unsafe&lt;/code> 代码.&lt;/p>
&lt;p>这并不意味有着两种 &lt;code>Rust&lt;/code>, 仅仅意味着不同的风险以及不同的可信任等级.&lt;/p>
&lt;p>如果你相信 &lt;code>Rust&lt;/code> 核心团队可以根除标准库中的不健全之处, 那么你甚至就可以让团队中的初级人员在此基础上编写受 &lt;code>Rust&lt;/code> 安全保证的 &lt;code>safe code&lt;/code>.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="rust枚举不止于此">Rust枚举不止于此&lt;/h2>
&lt;p>Cool bear早先说 &lt;code>SmartString&lt;/code> 有着买一送一的处理字符串的方式. Cool bear是对的!&lt;/p>
&lt;p>让我们来自己做一个 &lt;code>two-for-one&lt;/code> 的处理方式:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">UserID&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Number(&lt;span style="color:#66d9ef">u64&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Text(String),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>UserID&lt;/code> 是一个聚合类型, 一个 &lt;code>UserID&lt;/code> 的值可以是一个 &lt;code>UserID::Number&lt;/code> 变体, 或是一个 &lt;code>UserID::Text&lt;/code> 变体.如果我们想对它的内容做些操作, 我们需要用模式匹配:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">print_user_id&lt;/span>(id: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">UserID&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> id {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UserID::Number(n) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println!(&lt;span style="color:#e6db74">&amp;#34;user id number {}&amp;#34;&lt;/span>, n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UserID::Text(s) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;user id {}&amp;#34;&lt;/span>, s),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>希望你对这个用法很熟悉, 我们在不久前刚提到过这个用法.&lt;/p>
&lt;p>让我们进行一次打印操作:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_user_id(&lt;span style="color:#f92672">&amp;amp;&lt;/span>UserID::Number(&lt;span style="color:#ae81ff">79&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_user_id(&lt;span style="color:#f92672">&amp;amp;&lt;/span>UserID::Text(&lt;span style="color:#e6db74">&amp;#34;fh99a73gbh8&amp;#34;&lt;/span>.into()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user id number &lt;span style="color:#ae81ff">79&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user id fh99a73gbh8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们在这文章之前看到过另一个聚合类型, 然后我们实现 &lt;code>TryInto&lt;/code>, 我们会返回 &lt;code>Result&amp;lt;T, E&amp;gt;&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> TryFrom&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">i32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> Drink {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Error&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;#39;&lt;/span>static &lt;span style="color:#66d9ef">str&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">try_from&lt;/span>(x: &lt;span style="color:#66d9ef">i32&lt;/span>) -&amp;gt; Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>Self, Self::Error&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// omitted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Result&lt;/code> 值是一个枚举, 它实际是这样定义的:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>T, E&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// Contains the success value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> Ok(T),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// Contains the error value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> Err(E),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>让我们返回看我们的 &lt;code>UserID&lt;/code> 枚举:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">UserID&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Number(&lt;span style="color:#66d9ef">u64&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Text(String),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>它的大小是多少呢? 如果我们尝试在 &lt;code>C&lt;/code> 里模拟实现一个 &lt;code>Rust&lt;/code> 的枚举, 它将会看起来如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> UserIDKind {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UserIDKind_Number,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UserIDKind_Text,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> UserID {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> UserIDKind kind;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint64_t&lt;/span> number;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>尽管我们只需要两个变体, 但我们需要三个属性, 以让我们知道我们现在处理的是哪一个变体.&lt;/p>
&lt;p>举个例子, 在 &lt;code>print_user_id&lt;/code>, 我们应该使用 &lt;code>switch&lt;/code> 来处理我们使用的是 &lt;code>Number&lt;/code> 变体还是 &lt;code>Text&lt;/code> 变体:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">print_user_id&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> UserID&lt;span style="color:#f92672">*&lt;/span> id) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (id&lt;span style="color:#f92672">-&amp;gt;&lt;/span>kind) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> UserIDKind_Number:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;user id number %lu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, id&lt;span style="color:#f92672">-&amp;gt;&lt;/span>number);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> UserIDKind_Text:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;user id %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, id&lt;span style="color:#f92672">-&amp;gt;&lt;/span>text);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>并且当我们初始化 &lt;code>UserID&lt;/code> 结构体的时候, 我们仅需要初始化我们需要的属性, 并且设置它的 &lt;code>kind&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> UserID a &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .kind &lt;span style="color:#f92672">=&lt;/span> UserIDKind_Number,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .number &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">79&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_user_id(&lt;span style="color:#f92672">&amp;amp;&lt;/span>a);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> UserID b &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .kind &lt;span style="color:#f92672">=&lt;/span> UserIDKind_Text,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .text &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fh99a73gbh8&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_user_id(&lt;span style="color:#f92672">&amp;amp;&lt;/span>b);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是可以工作的:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user id number &lt;span style="color:#ae81ff">79&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user id fh99a73gbh8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但这并不理想, 这并没有像 &lt;code>Rust&lt;/code> 那样的安全保证, 我们无法阻止你创建一个 &lt;code>Text&lt;/code> 而 &lt;code>kind&lt;/code> 是一个 &lt;code>Number&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> UserID woops &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .kind &lt;span style="color:#f92672">=&lt;/span> UserIDKind_Number,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .text &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;woops&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_user_id(&lt;span style="color:#f92672">&amp;amp;&lt;/span>woops);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user id number &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们实现了一个不完善的抽象 - 我们可以直接访问它的底层表示, 并且以不合理的方式操作它.&lt;/p>
&lt;p>举个例子, 如果我们的 &lt;code>UserID&lt;/code> 是使用 &lt;code>malloc&lt;/code> 在堆上分配的并且也没有清零, 那会发生什么?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> UserID &lt;span style="color:#f92672">*&lt;/span>woops &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> UserID));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> woops&lt;span style="color:#f92672">-&amp;gt;&lt;/span>kind &lt;span style="color:#f92672">=&lt;/span> UserIDKind_Text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> woops&lt;span style="color:#f92672">-&amp;gt;&lt;/span>number &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">79&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_user_id(woops);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在debug模式编译下, 它不会很糟糕:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user id &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然而在release模式编译下, 随着优化的打开, 将会发生很有趣的现象:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -O3 -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user id &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ clang -O3 -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ clang -O3 -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user id m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从哪里来的? 谁知道呢. 但是它没有导致段错误 - 这意味着它从程序的其他部分读取数据. 在一个大型程序中, 那可能是用户的隐私数据, 而这个漏洞就可能被用来窃取隐私数据.&lt;/p>
&lt;p>不过这并不是一篇讲 &lt;code>C&lt;/code> 有多危险的文章,&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&amp;hellip;emmm, 让我们看看还有什么不好的地方.&lt;/p>
&lt;p>首先让我们看看我们 &lt;code>struct UserID&lt;/code> 的大小:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof&lt;span style="color:#f92672">(&lt;/span>struct UserID&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>24字节. 这只是一个结构体, 所以我们可以自己计算出来:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(struct UserID) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> UserID));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;%ld + %ld + %ld = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">enum&lt;/span> UserIDKind), &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">uint64_t&lt;/span>), &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">enum&lt;/span> UserIDKind) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">uint64_t&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof&lt;span style="color:#f92672">(&lt;/span>struct UserID&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span> + &lt;span style="color:#ae81ff">8&lt;/span> + 8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Oh, woops. 我们哪里做错了?&lt;/p>
&lt;p>淡定, 这是因为在 &lt;code>kind&lt;/code> 和 &lt;code>number&lt;/code> 之间有 &lt;code>padding&lt;/code>, 以使我们的属性是64位对齐的(后面会详细说明).&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>这就是为什么我们的 &lt;code>UserID&lt;/code> 结构体是3*8=24个字节.&lt;/p>
&lt;p>当前, 我们可以命令编译器不要做对齐, 然后在计算一次:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">__attribute__&lt;/span>((packed)) UserID {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> UserIDKind kind;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint64_t&lt;/span> number;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof&lt;span style="color:#f92672">(&lt;/span>struct UserID&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span> + &lt;span style="color:#ae81ff">8&lt;/span> + 8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>现在让我们看看 &lt;code>Rust&lt;/code> 中 &lt;code>UserID&lt;/code> 枚举的大小:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::mem::size_of;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">UserID&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Number(&lt;span style="color:#66d9ef">u64&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Text(String),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>UserID&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:10&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;UserID&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Oh, uh, 这太大了. 太大了. 我不认为 &lt;code>Rust&lt;/code> 的 &lt;code>String&lt;/code> 类型只是一个单纯的指向空字符结尾的指针(c-style). 我认为 &lt;a class="link" href="https://fasterthanli.me/articles/working-with-strings-in-rust" target="_blank" rel="noopener"
>it&amp;rsquo;s a little more involved&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::{mem::size_of, os::raw::c_char};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">UserID&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Number(&lt;span style="color:#66d9ef">u64&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Text(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> c_char),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>UserID&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:10&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;UserID&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ok, 这看起来合理多了. 并且比 &lt;code>C&lt;/code> 版本要小很多. 这里是为什么呢?&lt;/p>
&lt;p>首先, 这里必须有一个等同于上面写的 &lt;code>C&lt;/code> 语言的 &lt;code>kind&lt;/code> 一样作用的东西. 在 &lt;code>Rust&lt;/code> 中, 它叫做 &lt;code>discriminant&lt;/code>(判别符). 这是一个 &amp;ldquo;tagged unions&amp;rdquo; 中的 &amp;ldquo;tag&amp;rdquo;.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&amp;hellip;&amp;hellip;我猜它应该是通过重叠 &lt;code>*const c_char&lt;/code> 和 &lt;code>u64&lt;/code> 来节省空间, 因为它们只能有一个是有效的, 不能同时存在: 这也是为什么称他们为 &amp;ldquo;disjoint union&amp;rdquo;.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>所以总共只有16个字节.&lt;/p>
&lt;p>我们能做相同的事情在 &lt;code>C&lt;/code> 里面吗? 这当然可以! &lt;code>union&lt;/code> 关键字就是起着类似作用的. 这就像是一个结构体, 只是所有内容的内存地址是重叠的, 它的大小是它内部最大的那一个 (或多或少依然是需要考虑对齐的).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> UserID {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> UserIDKind kind;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">union&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint64_t&lt;/span> number;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(struct UserID) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> UserID));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof&lt;span style="color:#f92672">(&lt;/span>struct UserID&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们得到了与 &lt;code>Rust&lt;/code> 相同的结果.&lt;/p>
&lt;p>进一步的, 我们可以把 &lt;code>UserIDKind&lt;/code> 改成一个 &lt;code>uint8_t&lt;/code>(在64位计算机, &lt;code>clang 10&lt;/code>作为编译器的情况下它是4个字节):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> UserID {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> kind;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">union&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint64_t&lt;/span> number;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof&lt;span style="color:#f92672">(&lt;/span>struct UserID&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 16;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Mhhhh好像没发生什么变化&amp;hellip;&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>对的, 让我们再次 &lt;code>packing&lt;/code> 我们的结构体:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">__attribute__&lt;/span>((packed)) UserID {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> kind;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">union&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint64_t&lt;/span> number;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof&lt;span style="color:#f92672">(&lt;/span>struct UserID&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>只有9个字节了! 现在它压缩了.&lt;/p>
&lt;p>我们可以在 &lt;code>Rust&lt;/code> 中做类似的事情吗? &lt;code>Rust&lt;/code> 默认是以属性做适应性对齐的, 如果我们有一个 &lt;code>u8&lt;/code> and &lt;code>u64&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bar: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> baz: &lt;span style="color:#66d9ef">u64&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>Foo&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;它增长到了16个字节&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:16&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;Foo&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是, 像 &lt;code>C&lt;/code> 一样, 如果我们友好地要求, &lt;code>Rust&lt;/code> 也可以 &lt;code>pack&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[repr(packed)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bar: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> baz: &lt;span style="color:#66d9ef">u64&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:17&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;Foo&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是如果在枚举上呢?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[repr(packed)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">UserID&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Number(&lt;span style="color:#66d9ef">u64&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Text(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> c_char),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error&lt;span style="color:#f92672">[&lt;/span>E0517&lt;span style="color:#f92672">]&lt;/span>: attribute should be applied to struct or union
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --&amp;gt; src/main.rs:4:8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span> | &lt;span style="color:#75715e">#[repr(packed)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ^^^^^^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span> | / enum UserID &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">6&lt;/span> | | Number&lt;span style="color:#f92672">(&lt;/span>u64&lt;span style="color:#f92672">)&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">7&lt;/span> | | Text&lt;span style="color:#f92672">(&lt;/span>*const c_char&lt;span style="color:#f92672">)&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">8&lt;/span> | | &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |_- not a struct or union
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们不能 &lt;code>pack&lt;/code>. 这之前已经 &lt;a class="link" href="https://github.com/rust-lang/rust/issues/42547" target="_blank" rel="noopener"
>讨论&lt;/a> 过了, 也有 &lt;a class="link" href="https://github.com/rust-lang/rfcs/issues/1230" target="_blank" rel="noopener"
>讨论其它奇异的枚举布局优化的方案&lt;/a>, 但是现在, 还不能那么做.&lt;/p>
&lt;p>然而显然, &lt;code>smartstring&lt;/code> 就是那么做的.&lt;/p>
&lt;p>当一个 &lt;code>SmartString&lt;/code> 存在堆里的时候(这是一个 &lt;code>boxed&lt;/code> 变体), 它是24字节, 就像 &lt;code>String&lt;/code> 一样.&lt;/p>
&lt;p>但是如果我们尝试做一个我们自己的 &lt;code>smartstring&lt;/code>, 使用 &lt;code>Rust&lt;/code> 的枚举, 我们甚至无法接近它的大小:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::mem::size_of;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">SmartString&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Boxed(String),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Inline([&lt;span style="color:#66d9ef">u8&lt;/span>; &lt;span style="color:#ae81ff">24&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>[&lt;span style="color:#66d9ef">u8&lt;/span>; &lt;span style="color:#ae81ff">24&lt;/span>]&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>SmartString&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:10&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;String&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;&lt;span style="color:#f92672">[&lt;/span>u8; 24&lt;span style="color:#f92672">]&lt;/span>&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:12&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;SmartString&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里有件事是我们可以做的, 既然 &lt;code>Rust&lt;/code> 不允许我们打包它的枚举, 那我们就做一个自己的枚举.&lt;/p>
&lt;h2 id="写一个自己的枚举">写一个自己的枚举&lt;/h2>
&lt;p>首先, 我们不能使用 &lt;a class="link" href="https://doc.rust-lang.org/reference/items/unions.html" target="_blank" rel="noopener"
>Rust unions&lt;/a>, 因为它只支持 &lt;code>Copy&lt;/code> 和非 &lt;code>Drop&lt;/code> 类型.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::mem::size_of;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[repr(packed)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SmartString&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> discriminant: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: [&lt;span style="color:#66d9ef">u8&lt;/span>; &lt;span style="color:#ae81ff">24&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>SmartString&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;SmartString&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看! 25个字节. 这是我们目前最好的预想了.&lt;/p>
&lt;p>但是实际上还没做任何事 - 我们只是存了25个字节在结构体里.&lt;/p>
&lt;p>我们需要想出一个方法来保存我们的变体:&lt;/p>
&lt;ul>
&lt;li>boxed: a String&lt;/li>
&lt;li>inline: some utf-8 bytes, and I guess a length?&lt;/li>
&lt;/ul>
&lt;p>在 &amp;ldquo;inline&amp;rdquo; 变体时我们不能存大于24个字节的内容, 所以我们可以使用一个 &lt;code>u8&lt;/code> 来表示长度, 实际像下面所示:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Inline&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: [&lt;span style="color:#66d9ef">u8&lt;/span>; &lt;span style="color:#ae81ff">23&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后, 为了确保我们这几个类型实际上有着相同的大小, 我们使用 &lt;a class="link" href="https://lib.rs/crates/static_assertions" target="_blank" rel="noopener"
>static_assertions&lt;/a> crate:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> static_assertions::&lt;span style="color:#f92672">*&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::mem::size_of;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[repr(packed)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SmartString&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> discriminant: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: [&lt;span style="color:#66d9ef">u8&lt;/span>; &lt;span style="color:#ae81ff">24&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Inline&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: [&lt;span style="color:#66d9ef">u8&lt;/span>; &lt;span style="color:#ae81ff">23&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>assert_eq_size&lt;span style="color:#f92672">!&lt;/span>(String, Inline);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>SmartString&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo check
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Finished dev &lt;span style="color:#f92672">[&lt;/span>unoptimized + debuginfo&lt;span style="color:#f92672">]&lt;/span> target&lt;span style="color:#f92672">(&lt;/span>s&lt;span style="color:#f92672">)&lt;/span> in 0.00s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Good, 要确保足够傻瓜, 因为我们将要写很多 &lt;code>unsafe&lt;/code> 代码, 我们甚至能按照 &lt;code>String&lt;/code> 的大小来定义我们的 &lt;code>Inline&lt;/code>, 这个 &amp;ldquo;crate&amp;rdquo; 就可以帮忙检查我们的 &lt;code>Inline&lt;/code> 和 &lt;code>String&lt;/code> 大小相同.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> static_assertions::&lt;span style="color:#f92672">*&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::mem::size_of;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> VARIANT_SIZE: &lt;span style="color:#66d9ef">usize&lt;/span> &lt;span style="color:#f92672">=&lt;/span> std::mem::size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[repr(packed)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SmartString&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> discriminant: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: [&lt;span style="color:#66d9ef">u8&lt;/span>; VARIANT_SIZE],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[allow(dead_code)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Inline&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: [&lt;span style="color:#66d9ef">u8&lt;/span>; VARIANT_SIZE &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>assert_eq_size&lt;span style="color:#f92672">!&lt;/span>(String, Inline);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>SmartString&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Okay, 现在让我们实现我们的手动枚举. 首先让它能够被构建.&lt;/p>
&lt;p>我们仅使用了 &lt;code>[u8; VARIANT_SIZE]&lt;/code> 来保留 &lt;code>VARIANT_SIZE&lt;/code> 字节 - 如果我们真的想要往里面存一点东西, 我们将会用一个 &lt;code>*mut&lt;/code> 指针指向它, 然后把它转型为我们所需要的:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> SmartString {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">new_boxed&lt;/span>(s: String) -&amp;gt; &lt;span style="color:#a6e22e">Self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Self::new(&lt;span style="color:#ae81ff">0&lt;/span>, s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">new_inline&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">Self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Self::new(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Inline {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: Default::default(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">new&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span>(discriminant: &lt;span style="color:#66d9ef">u8&lt;/span>, data: &lt;span style="color:#a6e22e">T&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">Self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> res &lt;span style="color:#f92672">=&lt;/span> Self {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> discriminant,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: Default::default(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> ptr: &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> T &lt;span style="color:#f92672">=&lt;/span> res.data.as_mut_ptr().cast();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { ptr.write_unaligned(data) };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们现在可以在我们的 &lt;code>SmartString&lt;/code> 构建这两种变体:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> boxed &lt;span style="color:#f92672">=&lt;/span> SmartString::new_boxed(&lt;span style="color:#e6db74">&amp;#34;This is a longer string, would not fit inline&amp;#34;&lt;/span>.into());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> inline &lt;span style="color:#f92672">=&lt;/span> SmartString::new_inline();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除此之外我们目前也不能对它做其它事情了.&lt;/p>
&lt;p>让我们把它变得有用点, 例如, 从它获取一个 &lt;code>&amp;amp;str&lt;/code> 切片:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> AsRef&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">str&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> SmartString {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">as_ref&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">str&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> self.discriminant {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s: &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> ManuallyDrop&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> self.data.as_ptr().cast();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> tmp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { s.read_unaligned() };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { &lt;span style="color:#f92672">&amp;amp;*&lt;/span>(tmp.as_ref() &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">str&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s: &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> Inline &lt;span style="color:#f92672">=&lt;/span> self.data.as_ptr().cast();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsafe&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> slice &lt;span style="color:#f92672">=&lt;/span> std::slice::from_raw_parts((&lt;span style="color:#f92672">*&lt;/span>s).data.as_ptr(), (&lt;span style="color:#f92672">*&lt;/span>s).len &lt;span style="color:#66d9ef">as&lt;/span> _);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std::&lt;span style="color:#66d9ef">str&lt;/span>::from_utf8_unchecked(slice)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> unreachable!(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还记得我之前说过的我们应该如何努力审查不安全代码以确保不会违反不变体, 在这里就比较适用. 我们使用了更安全的变体, &lt;code>unreachable&lt;/code>, 但是如果我想冒险的话, 我会考虑使用 &lt;a class="link" href="https://doc.rust-lang.org/std/hint/fn.unreachable_unchecked.html" target="_blank" rel="noopener"
>unreachable_unchecked&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>译者: 审查指: 在这里我们把 &lt;code>discriminant&lt;/code> 当作一个枚举或者说不变体 &lt;code>match&lt;/code> 了, 因为它的值只有可能是0或者1以表示内容是 &lt;code>inline&lt;/code> or &lt;code>boxed&lt;/code>, 但是可能会有前文像 &lt;code>C&lt;/code> 那样在开发过程中传递了非法的值而导致错误, 所以使用 &lt;code>unreachable!&lt;/code> 宏来确保不会有这种情况出现, 在编译期就可以友好地提示开发者, 以使代码更加安全.&lt;/p>
&lt;/blockquote>
&lt;p>现在我们有了一个 &lt;code>AsRef&lt;/code> 实现, 我们可以打印出它的实际内容了 - 而不需要在意实际上它的变体是什么(&lt;code>Inline&lt;/code> or &lt;code>Boxoed&lt;/code>).&lt;/p>
&lt;p>方便起见, 我们实现 &lt;code>Display&lt;/code> 和 &lt;code>Debug&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::fmt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> fmt::Display &lt;span style="color:#66d9ef">for&lt;/span> SmartString {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self, f: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> fmt::Formatter&lt;span style="color:#f92672">&amp;lt;&amp;#39;&lt;/span>_&lt;span style="color:#f92672">&amp;gt;&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">fmt&lt;/span>::Result {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">str&lt;/span> &lt;span style="color:#f92672">=&lt;/span> self.as_ref();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt::Display::fmt(s, f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> fmt::Debug &lt;span style="color:#66d9ef">for&lt;/span> SmartString {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self, f: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> fmt::Formatter&lt;span style="color:#f92672">&amp;lt;&amp;#39;&lt;/span>_&lt;span style="color:#f92672">&amp;gt;&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">fmt&lt;/span>::Result {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">str&lt;/span> &lt;span style="color:#f92672">=&lt;/span> self.as_ref();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt::Debug::fmt(s, f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> boxed &lt;span style="color:#f92672">=&lt;/span> SmartString::new_boxed(&lt;span style="color:#e6db74">&amp;#34;This is a longer string, would not fit inline&amp;#34;&lt;/span>.into());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> inline &lt;span style="color:#f92672">=&lt;/span> SmartString::new_inline();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(boxed, inline);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:84&lt;span style="color:#f92672">]&lt;/span> boxed &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;This is a longer string, would not fit inline&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:84&lt;span style="color:#f92672">]&lt;/span> inline &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们还有很多事情没做 - 我们不能改变我们的 &lt;code>SmartString&lt;/code>, 但是 &lt;code>smartstring&lt;/code> 是允许的. 我们也不能降级我们的 &lt;code>boxed&lt;/code> 为 &lt;code>inline&lt;/code>, 我们也不能把 &lt;code>inline&lt;/code> 提升为 &lt;code>boxed&lt;/code> 以防它存太多东西了.&lt;/p>
&lt;p>虽然, 但目前有更紧迫的事情要做.&lt;/p>
&lt;p>请允许我缓缓道来.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s: String &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;this is just some text&amp;#34;&lt;/span>.into();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo build --quiet --release &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> valgrind --tool&lt;span style="color:#f92672">=&lt;/span>memcheck ./target/release/enumpeek
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span> Memcheck, a memory error detector
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span> Copyright &lt;span style="color:#f92672">(&lt;/span>C&lt;span style="color:#f92672">)&lt;/span> 2002-2017, and GNU GPL&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>d, by Julian Seward et al.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span> Using Valgrind-3.16.1 and LibVEX; rerun with -h &lt;span style="color:#66d9ef">for&lt;/span> copyright info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span> Command: ./target/release/enumpeek
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:82&lt;span style="color:#f92672">]&lt;/span> s &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;this is just some text&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span> HEAP SUMMARY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span> in use at exit: &lt;span style="color:#ae81ff">0&lt;/span> bytes in &lt;span style="color:#ae81ff">0&lt;/span> blocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span> total heap usage: &lt;span style="color:#ae81ff">15&lt;/span> allocs, &lt;span style="color:#ae81ff">15&lt;/span> frees, 2,335 bytes allocated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span> All heap blocks were freed -- no leaks are possible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span> For lists of detected and suppressed errors, rerun with: -s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173592&lt;span style="color:#f92672">==&lt;/span> ERROR SUMMARY: &lt;span style="color:#ae81ff">0&lt;/span> errors from &lt;span style="color:#ae81ff">0&lt;/span> contexts &lt;span style="color:#f92672">(&lt;/span>suppressed: &lt;span style="color:#ae81ff">0&lt;/span> from 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s: &lt;span style="color:#a6e22e">SmartString&lt;/span> &lt;span style="color:#f92672">=&lt;/span> SmartString::new_boxed(&lt;span style="color:#e6db74">&amp;#34;this is just some text&amp;#34;&lt;/span>.into());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo build --quiet --release &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> valgrind --tool&lt;span style="color:#f92672">=&lt;/span>memcheck ./target/release/enumpeek
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> Memcheck, a memory error detector
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> Copyright &lt;span style="color:#f92672">(&lt;/span>C&lt;span style="color:#f92672">)&lt;/span> 2002-2017, and GNU GPL&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>d, by Julian Seward et al.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> Using Valgrind-3.16.1 and LibVEX; rerun with -h &lt;span style="color:#66d9ef">for&lt;/span> copyright info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> Command: ./target/release/enumpeek
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:82&lt;span style="color:#f92672">]&lt;/span> s &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;this is just some text&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> HEAP SUMMARY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> in use at exit: &lt;span style="color:#ae81ff">22&lt;/span> bytes in &lt;span style="color:#ae81ff">1&lt;/span> blocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> total heap usage: &lt;span style="color:#ae81ff">15&lt;/span> allocs, &lt;span style="color:#ae81ff">14&lt;/span> frees, 2,335 bytes allocated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> LEAK SUMMARY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> definitely lost: &lt;span style="color:#ae81ff">22&lt;/span> bytes in &lt;span style="color:#ae81ff">1&lt;/span> blocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> indirectly lost: &lt;span style="color:#ae81ff">0&lt;/span> bytes in &lt;span style="color:#ae81ff">0&lt;/span> blocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> possibly lost: &lt;span style="color:#ae81ff">0&lt;/span> bytes in &lt;span style="color:#ae81ff">0&lt;/span> blocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> still reachable: &lt;span style="color:#ae81ff">0&lt;/span> bytes in &lt;span style="color:#ae81ff">0&lt;/span> blocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> suppressed: &lt;span style="color:#ae81ff">0&lt;/span> bytes in &lt;span style="color:#ae81ff">0&lt;/span> blocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> Rerun with --leak-check&lt;span style="color:#f92672">=&lt;/span>full to see details of leaked memory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> For lists of detected and suppressed errors, rerun with: -s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>173779&lt;span style="color:#f92672">==&lt;/span> ERROR SUMMARY: &lt;span style="color:#ae81ff">0&lt;/span> errors from &lt;span style="color:#ae81ff">0&lt;/span> contexts &lt;span style="color:#f92672">(&lt;/span>suppressed: &lt;span style="color:#ae81ff">0&lt;/span> from 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们发生了内存泄漏!&lt;/p>
&lt;p>&lt;code>String&lt;/code> 只是一个单纯的结构体, 但它在堆中有自己的内存分配. 在我们的 &lt;code>SmartString::new_boxed&lt;/code> 中, 我们拿了 &lt;code>String&lt;/code> 的所有权, 并且它有着在堆中相关联的内存我们不曾释放.&lt;/p>
&lt;p>编译器不知道释放我们保存在 &lt;code>SmartString&lt;/code> 以 &lt;code>boxed&lt;/code> 形式存放的 &lt;code>String&lt;/code>, 因为它不知道我们拿的是什么类型 - 它只知道我们用了24个字节, 这24个字节可能放着任何东西.&lt;/p>
&lt;p>如果我们知道这个类型, 事实上确实, 只是个 &lt;code>String&lt;/code>, 并且它们需要被 &lt;code>dropped&lt;/code>, 我们需要告诉编译器.&lt;/p>
&lt;p>下面是我们做 &lt;code>Drop&lt;/code> 的第一次痛苦经历:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Drop &lt;span style="color:#66d9ef">for&lt;/span> SmartString {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">drop&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> self.discriminant {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s: &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> String &lt;span style="color:#f92672">=&lt;/span> self.data.as_mut_ptr().cast();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> b: String &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { &lt;span style="color:#f92672">*&lt;/span>s };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drop(b);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// etc.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> unreachable!(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error&lt;span style="color:#f92672">[&lt;/span>E0507&lt;span style="color:#f92672">]&lt;/span>: cannot move out of &lt;span style="color:#e6db74">`&lt;/span>*s&lt;span style="color:#e6db74">`&lt;/span> which is behind a raw pointer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --&amp;gt; src/main.rs:46:42
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">46&lt;/span> | let b: String &lt;span style="color:#f92672">=&lt;/span> unsafe &lt;span style="color:#f92672">{&lt;/span> *s &lt;span style="color:#f92672">}&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ^^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | move occurs because &lt;span style="color:#e6db74">`&lt;/span>*s&lt;span style="color:#e6db74">`&lt;/span> has type &lt;span style="color:#e6db74">`&lt;/span>std::string::String&lt;span style="color:#e6db74">`&lt;/span>, which does not implement the &lt;span style="color:#e6db74">`&lt;/span>Copy&lt;span style="color:#e6db74">`&lt;/span> trait
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | help: consider borrowing here: &lt;span style="color:#e6db74">`&lt;/span>&amp;amp;*s&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Woops, 这不能工作, 我们不能从一个 &lt;code>raw pointer&lt;/code> &lt;code>move&lt;/code> 因为 &lt;code>String&lt;/code> 不是 &lt;code>Copy&lt;/code>.&lt;/p>
&lt;p>我们能做些什么? 我们能把它 &lt;code>Box&lt;/code> 起来么, &lt;code>Box&lt;/code> 有一个 &lt;code>from_raw&lt;/code> 方法, 这听起来不错:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Drop &lt;span style="color:#66d9ef">for&lt;/span> SmartString {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">drop&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> self.discriminant {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s: &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> String &lt;span style="color:#f92672">=&lt;/span> self.data.as_mut_ptr().cast();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { Box::from_raw(s) };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drop(b);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// etc.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> unreachable!(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:117&lt;span style="color:#f92672">]&lt;/span> s &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;this is just some text&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>free&lt;span style="color:#f92672">()&lt;/span>: invalid pointer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#ae81ff">179297&lt;/span> abort &lt;span style="color:#f92672">(&lt;/span>core dumped&lt;span style="color:#f92672">)&lt;/span> cargo run -q
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Uh, oh.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>让我们用我们友好的 &lt;code>Valgrind&lt;/code> 检查一下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">$&lt;/span> cargo build &lt;span style="color:#f92672">--&lt;/span>quiet &lt;span style="color:#f92672">--&lt;/span>release &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> valgrind &lt;span style="color:#f92672">--&lt;/span>tool&lt;span style="color:#f92672">=&lt;/span>memcheck .&lt;span style="color:#f92672">/&lt;/span>target&lt;span style="color:#f92672">/&lt;/span>release&lt;span style="color:#f92672">/&lt;/span>enumpeek
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> Memcheck, a memory error detector
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> Copyright (C) &lt;span style="color:#ae81ff">2002&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2017&lt;/span>, and GNU GPL&lt;span style="color:#f92672">&amp;#39;&lt;/span>&lt;span style="color:#a6e22e">d&lt;/span>, by Julian Seward et al.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> Using Valgrind&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">3.16.1&lt;/span> and LibVEX; rerun with &lt;span style="color:#f92672">-&lt;/span>h &lt;span style="color:#66d9ef">for&lt;/span> copyright info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> Command: .&lt;span style="color:#f92672">/&lt;/span>target&lt;span style="color:#f92672">/&lt;/span>release&lt;span style="color:#f92672">/&lt;/span>enumpeek
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[src&lt;span style="color:#f92672">/&lt;/span>main.rs:&lt;span style="color:#ae81ff">117&lt;/span>] s &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;this is just some text&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> Invalid free() &lt;span style="color:#f92672">/&lt;/span> delete &lt;span style="color:#f92672">/&lt;/span> delete[] &lt;span style="color:#f92672">/&lt;/span> realloc()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> at &lt;span style="color:#ae81ff">0x483B9AB&lt;/span>: &lt;span style="color:#a6e22e">free&lt;/span> (vg_replace_malloc.c:&lt;span style="color:#ae81ff">538&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> by &lt;span style="color:#ae81ff">0x10D501&lt;/span>: &lt;span style="color:#a6e22e">enumpeek&lt;/span>::main (&lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#f92672">/&lt;/span>home&lt;span style="color:#f92672">/&lt;/span>amos&lt;span style="color:#f92672">/&lt;/span>ftl&lt;span style="color:#f92672">/&lt;/span>enumpeek&lt;span style="color:#f92672">/&lt;/span>target&lt;span style="color:#f92672">/&lt;/span>release&lt;span style="color:#f92672">/&lt;/span>enumpeek)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> by &lt;span style="color:#ae81ff">0x10D8E2&lt;/span>: &lt;span style="color:#a6e22e">std&lt;/span>::rt::lang_start::{{closure}} (&lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#f92672">/&lt;/span>home&lt;span style="color:#f92672">/&lt;/span>amos&lt;span style="color:#f92672">/&lt;/span>ftl&lt;span style="color:#f92672">/&lt;/span>enumpeek&lt;span style="color:#f92672">/&lt;/span>target&lt;span style="color:#f92672">/&lt;/span>release&lt;span style="color:#f92672">/&lt;/span>enumpeek)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> by &lt;span style="color:#ae81ff">0x1163F7&lt;/span>: {{closure}} (rt.rs:&lt;span style="color:#ae81ff">52&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> by &lt;span style="color:#ae81ff">0x1163F7&lt;/span>: &lt;span style="color:#a6e22e">do_call&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>closure&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#66d9ef">i32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> (panicking.rs:&lt;span style="color:#ae81ff">297&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> by &lt;span style="color:#ae81ff">0x1163F7&lt;/span>: &lt;span style="color:#a6e22e">try&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">i32&lt;/span>,closure&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> (panicking.rs:&lt;span style="color:#ae81ff">274&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> by &lt;span style="color:#ae81ff">0x1163F7&lt;/span>: &lt;span style="color:#a6e22e">catch_unwind&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>closure&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#66d9ef">i32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> (panic.rs:&lt;span style="color:#ae81ff">394&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> by &lt;span style="color:#ae81ff">0x1163F7&lt;/span>: &lt;span style="color:#a6e22e">std&lt;/span>::rt::lang_start_internal (rt.rs:&lt;span style="color:#ae81ff">51&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> by &lt;span style="color:#ae81ff">0x10D561&lt;/span>: &lt;span style="color:#a6e22e">main&lt;/span> (&lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#f92672">/&lt;/span>home&lt;span style="color:#f92672">/&lt;/span>amos&lt;span style="color:#f92672">/&lt;/span>ftl&lt;span style="color:#f92672">/&lt;/span>enumpeek&lt;span style="color:#f92672">/&lt;/span>target&lt;span style="color:#f92672">/&lt;/span>release&lt;span style="color:#f92672">/&lt;/span>enumpeek)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> Address &lt;span style="color:#ae81ff">0x1ffefff561&lt;/span> is on thread &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&amp;#39;&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span> stack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> frame #&lt;span style="color:#ae81ff">1&lt;/span>, created by enumpeek::main (&lt;span style="color:#f92672">???&lt;/span>:)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> HEAP SUMMARY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#66d9ef">use&lt;/span> at exit: &lt;span style="color:#ae81ff">0&lt;/span> bytes &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> blocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> total heap usage: &lt;span style="color:#ae81ff">15&lt;/span> allocs, &lt;span style="color:#ae81ff">16&lt;/span> frees, &lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">335&lt;/span> bytes allocated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> All heap blocks were freed &lt;span style="color:#f92672">--&lt;/span> no leaks are possible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> For lists of detected and suppressed errors, rerun with: &lt;span style="color:#f92672">-&lt;/span>s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">179648&lt;/span>&lt;span style="color:#f92672">==&lt;/span> ERROR SUMMARY: &lt;span style="color:#ae81ff">1&lt;/span> errors from &lt;span style="color:#ae81ff">1&lt;/span> contexts (suppressed: &lt;span style="color:#ae81ff">0&lt;/span> from &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>问题看起来像是它在试图释放 &lt;code>String&lt;/code> 就像它分配在堆上一样, 然而并没有! 实际上是 &lt;code>String&lt;/code> 中的数据分配在堆上, 而不是 &lt;code>String&lt;/code> 本身.&lt;/p>
&lt;p>这里有一个看起来生效的方法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Drop &lt;span style="color:#66d9ef">for&lt;/span> SmartString {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">drop&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> self.discriminant {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s: &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> String &lt;span style="color:#f92672">=&lt;/span> self.data.as_mut_ptr().cast();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s: String &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { std::ptr::read_unaligned(s) };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drop(s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// etc.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> unreachable!(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以更进一步:&lt;/p>
&lt;ul>
&lt;li>使用泛型函数来减少重复代码.&lt;/li>
&lt;li>省略掉 &lt;code>drop&lt;/code>, 在 &lt;code>std::ptr::read_unaligned&lt;/code> 离开作用域后自动调用.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> SmartString {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">drop_variant&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { std::ptr::read_unaligned(self.data.as_ptr().cast::&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span>()) };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Drop &lt;span style="color:#66d9ef">for&lt;/span> SmartString {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">drop&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> self.discriminant {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { self.drop_variant::&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span>() },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">unsafe&lt;/span> { self.drop_variant::&lt;span style="color:#f92672">&amp;lt;&lt;/span>Inline&lt;span style="color:#f92672">&amp;gt;&lt;/span>() },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> unreachable!(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo build --quiet --release &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> valgrind --tool&lt;span style="color:#f92672">=&lt;/span>memcheck ./target/release/enumpeek
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span> Memcheck, a memory error detector
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span> Copyright &lt;span style="color:#f92672">(&lt;/span>C&lt;span style="color:#f92672">)&lt;/span> 2002-2017, and GNU GPL&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>d, by Julian Seward et al.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span> Using Valgrind-3.16.1 and LibVEX; rerun with -h &lt;span style="color:#66d9ef">for&lt;/span> copyright info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span> Command: ./target/release/enumpeek
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:99&lt;span style="color:#f92672">]&lt;/span> s &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;this is just some text&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span> HEAP SUMMARY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span> in use at exit: &lt;span style="color:#ae81ff">0&lt;/span> bytes in &lt;span style="color:#ae81ff">0&lt;/span> blocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span> total heap usage: &lt;span style="color:#ae81ff">15&lt;/span> allocs, &lt;span style="color:#ae81ff">15&lt;/span> frees, 2,335 bytes allocated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span> All heap blocks were freed -- no leaks are possible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span> For lists of detected and suppressed errors, rerun with: -s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">==&lt;/span>181085&lt;span style="color:#f92672">==&lt;/span> ERROR SUMMARY: &lt;span style="color:#ae81ff">0&lt;/span> errors from &lt;span style="color:#ae81ff">0&lt;/span> contexts &lt;span style="color:#f92672">(&lt;/span>suppressed: &lt;span style="color:#ae81ff">0&lt;/span> from 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>完美, 但是这完全正确了吗? 我不知道, 在让一堆人测试看看之前我是不会把代码用到生产环境中的. 但是至少在我们的 &lt;code>case&lt;/code> 中, 它已经没有发生内存泄漏了.&lt;/p>
&lt;p>这总归是好的.&lt;/p>
&lt;p>我们可以在我们的结构体中花上整天时间都在这重新实现 &lt;code>smartstring&lt;/code> 里面的功能, 但是有个点需要记住, 我们的版本比 &lt;code>smartstring&lt;/code> 大了足足一个字节.&lt;/p>
&lt;p>就像 &lt;code>smallvec::SmallVec&lt;/code> 类型比 &lt;code>Vec&lt;/code> 大一样.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo add smallvec
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Adding smallvec v1.4.2 to dependencies
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> std::mem::size_of;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> smallvec::SmallVec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>(), size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>SmallVec&lt;span style="color:#f92672">&amp;lt;&lt;/span>[&lt;span style="color:#66d9ef">u8&lt;/span>; &lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:100&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;Vec&amp;lt;u8&amp;gt;&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:100&lt;span style="color:#f92672">]&lt;/span> size_of::&amp;lt;SmallVec&amp;lt;&lt;span style="color:#f92672">[&lt;/span>u8; 1&lt;span style="color:#f92672">]&lt;/span>&amp;gt;&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因此, 希望到目前为止本文讲述的足足44分钟的时间里你已经 &lt;strong>完全&lt;/strong> 明白了为什么这是一个有趣的问题(请回忆下开篇所提到的问题).&lt;/p>
&lt;p>它的神秘不在于 &lt;code>SmallVec&amp;lt;[u8; 1]&amp;gt;&lt;/code> 比 &lt;code>Vec&amp;lt;u8&amp;gt;&lt;/code> 大8个字节, 因为 &lt;code>SmallVec&lt;/code> 只是一个枚举, 它的判定式只需要考虑两个变体, 但是因为 &lt;code>Rust&lt;/code> 需要额外的空间来保证对齐, 所以多用了整整8个字节.&lt;/p>
&lt;p>它的神秘在于, &lt;code>SmartString&lt;/code> 是怎么做到只有24个字节的.&lt;/p>
&lt;p>为了回答这个问题, 我们需要更深入的观察指针.&lt;/p>
&lt;h2 id="仔细看看指针">仔细看看指针&lt;/h2>
&lt;p>So, 什么是指针? 只是一串数字? 它告诉了你有些东西在内存的哪个地方.&lt;/p>
&lt;p>举个例子, 如果我们声明了一个本地变量 &lt;code>x&lt;/code>, &lt;code>i32&lt;/code>, 它可能直立在栈上:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// this is a signed 32-bit integer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// this is a reference to a signed 32-bit integer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> x_ref &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// this is a pointer to a signed 32-bit integer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> x_ptr &lt;span style="color:#f92672">=&lt;/span> x_ref &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(x_ptr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:105&lt;span style="color:#f92672">]&lt;/span> x_ptr &lt;span style="color:#f92672">=&lt;/span> 0x00007fff10be39ec
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然, 一个本地变量也可能在寄存器中. 但这在这里无关紧要. 一旦我们获取了某个对象的地址, 它就需要映射到虚拟内存地址空间的某个地方, 而在寄存器中的则不需要, 为了方便解释, 我们现在假装寄存器不存在.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>So, 数字是为了告诉你某些东西在内存中的位置. 这就像是地址, 就跟国家有实际位置的地址一样, 只是多了些间接性.&lt;/p>
&lt;p>一个对齐的指针是一个其值(地址)是数据大小的倍数的指针. 当数据是自然对齐的时候对 CPUs 来说很方便.&lt;/p>
&lt;p>让我们看一些例子.&lt;/p>
&lt;p>我们可以在内存中寻址的的最小单元是字节. 一个指向字节的指针总是对齐的, 因为指针用字节来计数, 换句话说, 一个 &lt;code>u8&lt;/code> 的对齐单位就是1.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>arr[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>arr[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>arr[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>arr[&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> _,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:106&lt;span style="color:#f92672">]&lt;/span> &amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> as *const _ &lt;span style="color:#f92672">=&lt;/span> 0x00007ffd6474abdc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:106&lt;span style="color:#f92672">]&lt;/span> &amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> as *const _ &lt;span style="color:#f92672">=&lt;/span> 0x00007ffd6474abdd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:106&lt;span style="color:#f92672">]&lt;/span> &amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>2&lt;span style="color:#f92672">]&lt;/span> as *const _ &lt;span style="color:#f92672">=&lt;/span> 0x00007ffd6474abde
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:106&lt;span style="color:#f92672">]&lt;/span> &amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>3&lt;span style="color:#f92672">]&lt;/span> as *const _ &lt;span style="color:#f92672">=&lt;/span> 0x00007ffd6474abdf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果讨论的是指向 &lt;code>u16&lt;/code> 的指针, 那么它的对齐单位是2.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>fn main&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> let arr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>1u16, 2u16, 3u16, 4u16&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fn inspect&amp;lt;T&amp;gt;&lt;span style="color:#f92672">(&lt;/span>t: *const T&lt;span style="color:#f92672">)&lt;/span> -&amp;gt; &lt;span style="color:#f92672">(&lt;/span>*const T, bool&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>t, t as usize % 2 &lt;span style="color:#f92672">==&lt;/span> 0&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!&lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inspect&lt;span style="color:#f92672">(&lt;/span>&amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> as *const _&lt;span style="color:#f92672">)&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inspect&lt;span style="color:#f92672">(&lt;/span>&amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> as *const _&lt;span style="color:#f92672">)&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inspect&lt;span style="color:#f92672">(&lt;/span>&amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>2&lt;span style="color:#f92672">]&lt;/span> as *const _&lt;span style="color:#f92672">)&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inspect&lt;span style="color:#f92672">(&lt;/span>&amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>3&lt;span style="color:#f92672">]&lt;/span> as *const _&lt;span style="color:#f92672">)&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:110&lt;span style="color:#f92672">]&lt;/span> inspect&lt;span style="color:#f92672">(&lt;/span>&amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>0&lt;span style="color:#f92672">]&lt;/span> as *const _&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x00007ffd81bf5918,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> true,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:110&lt;span style="color:#f92672">]&lt;/span> inspect&lt;span style="color:#f92672">(&lt;/span>&amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> as *const _&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x00007ffd81bf591a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> true,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:110&lt;span style="color:#f92672">]&lt;/span> inspect&lt;span style="color:#f92672">(&lt;/span>&amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>2&lt;span style="color:#f92672">]&lt;/span> as *const _&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x00007ffd81bf591c,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> true,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:110&lt;span style="color:#f92672">]&lt;/span> inspect&lt;span style="color:#f92672">(&lt;/span>&amp;amp;arr&lt;span style="color:#f92672">[&lt;/span>3&lt;span style="color:#f92672">]&lt;/span> as *const _&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x00007ffd81bf591e,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> true,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同理, 对于 &lt;code>u32&lt;/code> 是4, &lt;code>u64&lt;/code> 是8.&lt;/p>
&lt;p>下面有一个正确对齐的例子:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>底部的小方块表示如果我们想要存该类型, 可以把它放在那里.&lt;/p>
&lt;p>顶部部分表示实际的内存布局, 举个例子, 一个结构体:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stddef.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> S {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint16_t&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint32_t&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;sizeof(S) = %ld&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> S));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;offsetof(struct S, a) = %zu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, offsetof(&lt;span style="color:#66d9ef">struct&lt;/span> S, a));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;offsetof(struct S, b) = %zu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, offsetof(&lt;span style="color:#66d9ef">struct&lt;/span> S, b));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;offsetof(struct S, c) = %zu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, offsetof(&lt;span style="color:#66d9ef">struct&lt;/span> S, c));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;offsetof(struct S, d) = %zu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, offsetof(&lt;span style="color:#66d9ef">struct&lt;/span> S, d));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof&lt;span style="color:#f92672">(&lt;/span>S&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>offsetof&lt;span style="color:#f92672">(&lt;/span>struct S, a&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>offsetof&lt;span style="color:#f92672">(&lt;/span>struct S, b&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>offsetof&lt;span style="color:#f92672">(&lt;/span>struct S, c&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>offsetof&lt;span style="color:#f92672">(&lt;/span>struct S, d&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这里, 一切顺利.&lt;/p>
&lt;p>我们用另一个布局代替看看:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> S {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint16_t&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint32_t&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ clang -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sizeof&lt;span style="color:#f92672">(&lt;/span>S&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>offsetof&lt;span style="color:#f92672">(&lt;/span>struct S, a&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>offsetof&lt;span style="color:#f92672">(&lt;/span>struct S, b&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>offsetof&lt;span style="color:#f92672">(&lt;/span>struct S, c&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>offsetof&lt;span style="color:#f92672">(&lt;/span>struct S, d&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了维持对齐, 编译器插入了废料:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>&amp;ldquo;Padding&amp;rdquo; 不绝对是置零 - 它只是没有使用的空间. 即使它初始化置零了, 也不能保证它会在你分配成员的时候维持0.&lt;/p>
&lt;p>经常使用该结构体可能会混淆值和填充的 &lt;code>padding&lt;/code>, 因此一个好的 &lt;code>old block memory comparison&lt;/code> (memcmp) 不能够测试两个结构体是否完全相等.&lt;/p>
&lt;blockquote>
&lt;p>原文: Regular usage of the struct might mess with the values in the padding, and so a good old block memory comparison (memcmp) would not be enough to test two structs for equality.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>译者: 这里没懂作者想说什么, 有人清楚的话可以提个issue给我.&lt;/p>
&lt;/blockquote>
&lt;p>我们在 &lt;code>Rust&lt;/code> 中定义一个相同布局的结构体会发生什么?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">S&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b: &lt;span style="color:#66d9ef">u16&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d: &lt;span style="color:#66d9ef">u32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(std::mem::size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>S&lt;span style="color:#f92672">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:112&lt;span style="color:#f92672">]&lt;/span> std::mem::size_of::&amp;lt;S&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为什么只有8个字节? 发生了什么? 让我们来借助工具看看它的布局:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo add memoffset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Adding memoffset v0.5.5 to dependencies
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">S&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b: &lt;span style="color:#66d9ef">u16&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d: &lt;span style="color:#66d9ef">u32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">use&lt;/span> memoffset::offset_of;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std::mem::size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>S&lt;span style="color:#f92672">&amp;gt;&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, a),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, b),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, c),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:113&lt;span style="color:#f92672">]&lt;/span> std::mem::size_of::&amp;lt;S&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:113&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, a&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:113&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, b&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:113&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, c&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:113&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, d&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们的成员被重新排序了!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>我们可以让 &lt;code>Rust compiler&lt;/code> 不要重排序就像 &lt;code>C&lt;/code> 一样通过 &lt;code>repr(C)&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#[repr(C)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">S&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b: &lt;span style="color:#66d9ef">u16&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d: &lt;span style="color:#66d9ef">u32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">use&lt;/span> memoffset::offset_of;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std::mem::size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>S&lt;span style="color:#f92672">&amp;gt;&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, a),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, b),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, c),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> std::mem::size_of::&amp;lt;S&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, a&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, b&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, c&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, d&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在我们有了和 &lt;code>C&lt;/code> 一样的布局了, 也有着相同的填充.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>或者也可以让编译器既不要重新排序也不要填充以完全忽略对齐:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#[repr(C, packed)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">S&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b: &lt;span style="color:#66d9ef">u16&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d: &lt;span style="color:#66d9ef">u32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">use&lt;/span> memoffset::offset_of;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std::mem::size_of::&lt;span style="color:#f92672">&amp;lt;&lt;/span>S&lt;span style="color:#f92672">&amp;gt;&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, a),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, b),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, c),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset_of&lt;span style="color:#f92672">!&lt;/span>(S, d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在, &lt;code>S.b&lt;/code> 不再很好地对齐了.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> std::mem::size_of::&amp;lt;S&amp;gt;&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, a&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, b&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, c&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:11&lt;span style="color:#f92672">]&lt;/span> offset_of!&lt;span style="color:#f92672">(&lt;/span>S, d&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;p>假如我们尝试获取一个引用, &lt;code>Rust&lt;/code> 会警告我们(当前只是 &lt;code>warn&lt;/code>, 以后可能会变成一个 &lt;code>error&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#[repr(C, packed)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#[derive(Default)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">S&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b: &lt;span style="color:#66d9ef">u16&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d: &lt;span style="color:#66d9ef">u32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> s: &lt;span style="color:#a6e22e">S&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Default::default();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbg!(&lt;span style="color:#f92672">&amp;amp;&lt;/span>s.b);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warning: borrow of packed field is unsafe and requires unsafe &lt;span style="color:#66d9ef">function&lt;/span> or block &lt;span style="color:#f92672">(&lt;/span>error E0133&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --&amp;gt; src/main.rs:12:10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">12&lt;/span> | dbg!&lt;span style="color:#f92672">(&lt;/span>&amp;amp;s.b&lt;span style="color:#f92672">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ^^^^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> note: &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#75715e">#[warn(safe_packed_borrows)]` on by default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> note: &lt;span style="color:#66d9ef">for&lt;/span> more information, see issue &lt;span style="color:#75715e">#46043 &amp;lt;https://github.com/rust-lang/rust/issues/46043&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warning: &lt;span style="color:#ae81ff">1&lt;/span> warning emitted
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>src/main.rs:12&lt;span style="color:#f92672">]&lt;/span> &amp;amp;s.b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>迄今&amp;hellip; 所有的事情在我 &lt;code>2018 i7&lt;/code> 处理器上工作得很好.&lt;/p>
&lt;p>我们可以改变它也没有任何问题:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#[repr(C, packed)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#[derive(Default)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">S&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b: &lt;span style="color:#66d9ef">u16&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d: &lt;span style="color:#66d9ef">u32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> s: &lt;span style="color:#a6e22e">S&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Default::default();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsafe&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s.b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x123&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println!(&lt;span style="color:#e6db74">&amp;#34;{:#x}&amp;#34;&lt;/span>, s.b);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x123
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这并不是获得未对齐指针的唯一方法, 使用指针类型转换我们也可以把两个 &lt;code>u8&lt;/code> 当作一个单独的未对齐的 &lt;code>u16&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#66d9ef">u8&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> ptr_u16 &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> arr[&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> _ &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> &lt;span style="color:#66d9ef">u16&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsafe&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>ptr_u16 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x123&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println!(&lt;span style="color:#e6db74">&amp;#34;{:#x}&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>ptr_u16);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意, &lt;code>clippy&lt;/code> 会捕获到这个, 并且认为这是一个错误.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo clippy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Checking enumpeek v0.1.0 &lt;span style="color:#f92672">(&lt;/span>/home/amos/ftl/enumpeek&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: casting from &lt;span style="color:#e6db74">`&lt;/span>*mut u8&lt;span style="color:#e6db74">`&lt;/span> to a more-strictly-aligned pointer &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>*mut u16&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">2&lt;/span> bytes&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --&amp;gt; src/main.rs:3:19
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span> | let ptr_u16 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&amp;amp;mut arr&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">])&lt;/span> as *mut _ as *mut u16;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> note: &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#75715e">#[deny(clippy::cast_ptr_alignment)]` on by default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">=&lt;/span> help: &lt;span style="color:#66d9ef">for&lt;/span> further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_ptr_alignment
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过这在我的电脑上依旧是可以运行的:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo run -q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x123
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所以为什么我们要再次关注对齐呢?&lt;/p>
&lt;p>好吧, 这是一个很长的故事&amp;hellip;&lt;/p>
&lt;h2 id="我们想要什么-对齐-我们为什么要它-well">我们想要什么? 对齐! 我们为什么要它? Well&amp;hellip;&lt;/h2>
&lt;p>回到 &lt;code>C&lt;/code> 发明的年代, 那个时候有些处理器不怎么支持没有对齐过的内存访问.&lt;/p>
&lt;p>对于这些处理器, 没有对齐的内存访问可能会导致&lt;a class="link" href="https://www.kernel.org/doc/Documentation/unaligned-memory-access.txt" target="_blank" rel="noopener"
>抛出一个处理器错误&lt;/a>: 异常处理器或许能够正常访问一个没有对齐的内存, 但是会浪费较多的性能, 或者是干脆没法访问未对齐的内存, 然后程序运行就被 abort 了.&lt;/p>
&lt;p>在另一些处理器架构里, 像是英特尔的 &amp;ldquo;Core 2&amp;rdquo; 系列, 通常会用一些性能损耗来支持未对齐的内存.&lt;/p>
&lt;p>我本来想在这里放上一些 microbenchmarks, 但是它们有时候会互相矛盾 - 基准测试有很多影响因素. 有些基准测试显示有 10% 的性能降低, 有些会降低 50%, 显然有很多会影响到关于访问未对齐内存的性能测试.&lt;/p>
&lt;p>但是请记住, 即使处理器开始对未对齐内存做了一级支持, 但是出于性能原因仍然要避免使用未对齐内存.&lt;/p>
&lt;p>我通常把最好的东西留到最后说 但是:&lt;/p>
&lt;p>一些架构可能不会抛出处理器异常, 而是静默地执行一些不同的读操作.&lt;/p>
&lt;p>&lt;img src="/post/translation/rust/peeking_inside_a_rust_enum/armv4t.jpg"
width="640"
height="518"
srcset="/post/translation/rust/peeking_inside_a_rust_enum/armv4t_hub50016a2bde62f69b78292ec788779b2_120594_480x0_resize_q75_box.jpg 480w, /post/translation/rust/peeking_inside_a_rust_enum/armv4t_hub50016a2bde62f69b78292ec788779b2_120594_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="An example ARMv4t chip: the sound processor chip for the SEGA NAOMI arcade system."
class="gallery-image"
data-flex-grow="123"
data-flex-basis="296px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h2 id="很久很久-在armv5以前">很久很久, 在ARMv5以前&amp;hellip;&lt;/h2>
&lt;p>我们已经在这篇文章里读了一些关于未对齐内存的内容.&lt;/p>
&lt;p>所以展示上面所说的不同的读操作会相对比较容易.&lt;/p>
&lt;p>首先你需要一些数据 - 我们只用了 8 个不同的字节值, 这很容易理解后面将会发生什么.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> arr[&lt;span style="color:#ae81ff">8&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#ae81ff">0xef&lt;/span>, &lt;span style="color:#ae81ff">0xcd&lt;/span>, &lt;span style="color:#ae81ff">0xab&lt;/span>, &lt;span style="color:#ae81ff">0x89&lt;/span>, &lt;span style="color:#ae81ff">0x67&lt;/span>, &lt;span style="color:#ae81ff">0x45&lt;/span>, &lt;span style="color:#ae81ff">0x23&lt;/span>, &lt;span style="color:#ae81ff">0x01&lt;/span> };
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后我们去读一个没有对齐的地址. 举个例子, 我们尝试从数组的第二个元素开始读取一个 &lt;code>uint32_t&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> arr[&lt;span style="color:#ae81ff">8&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">0xef&lt;/span>, &lt;span style="color:#ae81ff">0xcd&lt;/span>, &lt;span style="color:#ae81ff">0xab&lt;/span>, &lt;span style="color:#ae81ff">0x89&lt;/span>, &lt;span style="color:#ae81ff">0x67&lt;/span>, &lt;span style="color:#ae81ff">0x45&lt;/span>, &lt;span style="color:#ae81ff">0x23&lt;/span>, &lt;span style="color:#ae81ff">0x01&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// arrays are zero-indexed, so `1` is the second item
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">uint32_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">uint32_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)(&lt;span style="color:#f92672">&amp;amp;&lt;/span>arr[&lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;0x%08x&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>ptr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>猜猜会打印什么? 是 &lt;code>0xcdab8967&lt;/code>? 错了!&lt;/p>
&lt;p>我2018年的i7处理器是一个小端处理器:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ lscpu | grep -E &lt;span style="color:#e6db74">&amp;#39;(Byte Order|Model name)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Byte Order: Little Endian
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Model name: Intel&lt;span style="color:#f92672">(&lt;/span>R&lt;span style="color:#f92672">)&lt;/span> Core&lt;span style="color:#f92672">(&lt;/span>TM&lt;span style="color:#f92672">)&lt;/span> i7-8750H CPU @ 2.20GHz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这意味着字节是从最低有效值存储到最高有效值.&lt;/p>
&lt;p>所以与其说是这样子的:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>其实是这样子的:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ gcc -Wall main.c -o main &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> ./main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x6789abcd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这就是为什么我为我的数组选了这些好辨识的值的原因.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>&lt;img src="/post/translation/rust/peeking_inside_a_rust_enum/gba.jpg"
width="1280"
height="884"
srcset="/post/translation/rust/peeking_inside_a_rust_enum/gba_hu302f1c2d37f956d6cc8b3c35003135c9_97592_480x0_resize_q75_box.jpg 480w, /post/translation/rust/peeking_inside_a_rust_enum/gba_hu302f1c2d37f956d6cc8b3c35003135c9_97592_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="A &amp;lsquo;Glacier&amp;rsquo; Game Boy Advance - one of the colors available at launch in North America"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>| &lt;a class="link" href="https://devkitpro.org/wiki/Getting_Started" target="_blank" rel="noopener"
>devKitPro&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>我以前也没读过关于GBA开发的相关文档, 我只是找了个项目&lt;a class="link" href="https://vba-m.com/" target="_blank" rel="noopener"
>VisualBoyAdvance&lt;/a>:&lt;/p>
&lt;p>&lt;img src="/post/translation/rust/peeking_inside_a_rust_enum/gba-hello.png"
width="480"
height="349"
srcset="/post/translation/rust/peeking_inside_a_rust_enum/gba-hello_hu374745a0a15a6dd857febbf559df6352_9948_480x0_resize_box_3.png 480w, /post/translation/rust/peeking_inside_a_rust_enum/gba-hello_hu374745a0a15a6dd857febbf559df6352_9948_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>这个项目的 &lt;code>C&lt;/code> 代码看起来如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// (cut)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// clear screen
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> iprintf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x1b&lt;/span>&lt;span style="color:#e6db74">[2J&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// print at coordinates 10,10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> iprintf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x1b&lt;/span>&lt;span style="color:#e6db74">[10;10H&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iprintf(&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// (cut)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So - 足够简单了!他有一些自己的 &lt;code>printf&lt;/code> 实现 - 除此之外, 这就只是 &lt;code>C&lt;/code>! 然后同样用 &lt;code>GCC&lt;/code> 编译.&lt;/p>
&lt;p>所以让我们的代码跑起来并不是&lt;strong>很难&lt;/strong>.&lt;/p>
&lt;p>以下是完整的代码 &lt;code>source/console.c&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;gba_console.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;gba_video.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;gba_interrupt.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;gba_systemcalls.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> irqInit();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> irqEnable(IRQ_VBLANK);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consoleDemoInit();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// clear screen
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> iprintf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x1b&lt;/span>&lt;span style="color:#e6db74">[2J&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// print at coordinates 10,10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> iprintf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x1b&lt;/span>&lt;span style="color:#e6db74">[10;10H&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> arr[&lt;span style="color:#ae81ff">8&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">0xef&lt;/span>, &lt;span style="color:#ae81ff">0xcd&lt;/span>, &lt;span style="color:#ae81ff">0xab&lt;/span>, &lt;span style="color:#ae81ff">0x89&lt;/span>, &lt;span style="color:#ae81ff">0x67&lt;/span>, &lt;span style="color:#ae81ff">0x45&lt;/span>, &lt;span style="color:#ae81ff">0x23&lt;/span>, &lt;span style="color:#ae81ff">0x01&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// arrays are zero-indexed, so `1` is the second item
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">uint32_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">uint32_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)(&lt;span style="color:#f92672">&amp;amp;&lt;/span>arr[&lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iprintf(&lt;span style="color:#e6db74">&amp;#34;0x%08x&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>ptr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> VBlankIntrWait();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>