<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Note on Rabbit hole</title><link>/tags/note/</link><description>Recent content in Note on Rabbit hole</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 01 May 2021 00:50:44 +0800</lastBuildDate><atom:link href="/tags/note/index.xml" rel="self" type="application/rss+xml"/><item><title>Covariance and Contravariance</title><link>/post/programming_language/covariance_and_contravariance/</link><pubDate>Sat, 01 May 2021 00:50:44 +0800</pubDate><guid>/post/programming_language/covariance_and_contravariance/</guid><description>&lt;blockquote>
&lt;p>逆变和协变看了忘忘了看, 这次学C#顺带查阅各处总结了下&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>协变&lt;/strong>&lt;/p>
&lt;p>协变是指能够使用比原始指定的类型派生程度更大的类型.&lt;/p>
&lt;p>例如Dog与Cat继承自Animal, 那么从Dog-&amp;gt;Animal就称为协变, 那么协变有什么作用呢?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Animal.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">abstract&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Animal&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Dog&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Animal&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Main.cs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Dog&lt;/span> &lt;span class="n">dog&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Dog&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Animal&lt;/span> &lt;span class="n">animal&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dog&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Dog&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">dogs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Dog&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">animals&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dogs&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dog继承自Animal, 所以Dog可以隐式的转化为Animal, 但是List&lt;Dog>与List&lt;Animal>之间没有继承关系, 所以无法隐式转换, 如果想要隐式转换需要如下代码:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">animals&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dogs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Select&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">ToList&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将小狗列表中的小狗挨个显式转换为Animal.&lt;/p>
&lt;p>所以C#提供了协变的语法糖, 也就是out, 意思是指该泛型可以作为输出返回.
也就是说可以用如下代码:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Main.cs &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Dog&lt;/span> &lt;span class="n">dog&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Dog&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Animal&lt;/span> &lt;span class="n">animal&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dog&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Dog&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">dogs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Dog&lt;/span>&lt;span class="p">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">animals&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dogs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// IEnumerable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span> &lt;span class="k">interface&lt;/span> &lt;span class="nc">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="k">out&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;:&lt;/span> &lt;span class="n">IEnumerable&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为T只能作为结果返回, 所以T不会被修改, 编译器可以帮我们进行强制转换.
但实际上out只是上面强制转换的一个语法糖而已, 实际上反编译的代码依然进行的是强制类型转换.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">animals&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Animal&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="n">dogs&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>至于为什么只能作为结果返回而不能作为输入呢?
我们假设:&lt;/p>
&lt;ul>
&lt;li>A ≼ B 意味着 A 是 B 的子类型.&lt;/li>
&lt;li>A → B 指的是以 A 为参数类型, 以 B 为返回值类型的函数类型.&lt;/li>
&lt;li>x : A 意味着 x 的类型为 A.
假设我有如下三种类型:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Greyhound ≼ Dog ≼ Animal
&lt;/code>&lt;/pre>&lt;p>问题: 以下哪种类型是 Dog → Dog 的子类型呢？&lt;/p>
&lt;ol>
&lt;li>Greyhound → Greyhound&lt;/li>
&lt;li>Greyhound → Animal&lt;/li>
&lt;li>Animal → Animal&lt;/li>
&lt;li>Animal → Greyhound&lt;/li>
&lt;/ol>
&lt;p>我们假设 f 是一个以 Dog → Dog 为参数的函数, 那么可以这样假设: f : (Dog → Dog) → String&lt;/p>
&lt;p>那么容易回答上述问题:&lt;/p>
&lt;ol>
&lt;li>不是, 因为传入的类型可能是狗的其它自类型但不是灰狗, 这样也是符合函数签名的, 但是答案1就不符合了.&lt;/li>
&lt;li>同上&lt;/li>
&lt;li>不是, 因为有可能 f 在调用完参数之后让它的返回值(Animal)狗叫, 但是并非所有的动物都会狗叫, 所以同样存在符合函数签名但不是答案4的结果.&lt;/li>
&lt;li>是的, 所有的Dog都是Animal, 所以传进去的任何Dog都是符合的, 而所有的Greyhoud都是狗, 也都可以狗叫.&lt;/li>
&lt;/ol>
&lt;p>这样就可以得到我们最初的答案了&amp;mdash;为什么只能作为结果返回而不能作为参数输入, 因为所有的Dog都是Animal, 但是如果作为参数的话, 那么不是所有的Animal都是Dog, 就有可能往IEnumerable&lt;Dog>里传一个Cat, 但这又是符合IEnumerable&lt;Animal>签名的, 所以是不行的.&lt;/p>
&lt;p>而由上面的例子也可以得到, 与协变相反的就是逆变, 也就是超类可以作为泛型参数而不能作为输出结果, 简单的公式为:
(Animal → Greyhound) ≼ (Dog → Dog)&lt;/p>
&lt;p>解释为: 我们允许一个函数类型中, 返回值类型是协变的, 而参数类型是逆变的. 返回值类型是协变的, 意思是 A ≼ B 就意味着 (T → A) ≼ (T → B) . 参数类型是逆变的, 意思是 A ≼ B 就意味着 (B → T) ≼ (A → T)  A 和 B 的位置颠倒过来了, 通俗点协变就是返回值可以是超类, 而逆变则是参数可以是子类.&lt;/p></description></item></channel></rss>